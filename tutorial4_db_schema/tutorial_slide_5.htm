<HTML><HEAD><TITLE>Slide 5 - Tutorial on Database Schema</TITLE></HEAD>

<BODY TEXT="#202020">

<FONT COLOR=blue FACE=Verdana SIZE=2>
<!-- end Standard Header - Version 3-->

<!-- begin body Text -->
<B>Tutorial on Database Schema - Slide 5</B> - Primary and Foreign Keys and Relationships.
<BR><BR><A HREF="tutorial_slide_4.htm">Back</A>&nbsp;&nbsp;&nbsp;<A HREF="tutorial_slide_6.htm">Next Slide</A>

<BR><BR>
<!--- <IMG ALT="Customers and Products Data Model" SRC="images/customers_and_products_dezign.gif"> --->

<FONT COLOR=blue FACE=Verdana SIZE=2>

<OL>
<B><LI>Keys</B>
<UL><LI>Primary and Foreign Keys</UL>

<B><LI>Relationships</B>
<UL><LI>One-to-Many and Many-to-Many Relationships</UL>

</OL>


<IMG ALT="Ordering in Starbucks" SRC="images/ordering_in_starbucks.gif">
<BR>
<HR>
I would like to start by defining some basic conventions.
<BR>
<B>Primary Keys.</B>
<LI>These are indicated by <B>'PK'</B> alongside the field in a Table.
<LI>They show the field that identifies the record uniquely.
<LI>For example, the 'product_id' for a Product and an 'order_id' for an Order.
<LI>The values are usually generated by an 'Auto-Increment' field.
<LI>They don't have any intrinsic meaning and are simply integers generated automatically one after another.
<BR><BR>
<B>Primary/Foreign Keys.</B>
<LI>These are indicated by <B>'PF'</B> alongside the field in a Table.
<LI>In this case, the field also exists as a Primary Key in another Table.
<LI>In our example, the Primary Key in the 'Customer_Orders_Products' Table is a Composite Key, made up of two Fields.
<LI>The 'product_id' is the Primary Key in the 'Products' Table, and the 'order_id' is the Primary Key in the 'Customer_Orders' Table.

<BR><BR>
<B>Foreign Keys.</B>
<LI>These are indicated by 'FK' alongside the field in a Table.
<LI>They show a reference to the Primary Key for a record in another Table.
<LI>For example, the 'customer_id' in the Customer_Orders Table is linked to 
a 'customer_id' in the Customer Table (not shown).

<BR><BR>

<B>One-to-Many Relationships.</B>
<LI>One-to-Many Relationships are very common in the real world, and can be read that 'One' Parent can have 'Many' children.
<LI>In this diagram, One Product can be associated with Many Customer_Orders_Products.

<LI>The line between Products and Customer_Orders_Products is a continuous line (not a dotted line). 
<LI>This means that the 'product_id' field is a Primary Key in the Customer_Orders_Products Table.
<LI>A dotted line would indicate the existence of a Foreign Key (which is defined above).
<BR><B>'Crows-Feet'</B>
<LI>At the Customer_Orders_Products end, there is what's called a 'Crows-Feet' symbol.
<LI>This indicates the 'Many' aspect of the relationship.
<LI>The little 'o' shows that this is an Optional relationship.
<LI>In other words, not every Product has an associated record in the Customer_Orders_Products Table.
<LI>This applies, of course, to Products that nobody orders.
<LI>At the other end of the line there is a small horizontal line. This means that this is essential.
<LI>In other words, every product_id in the Customer_Orders_Products Table must match a product_id in the products Table.
<LI>This means that a Customer cannot order a Product that does not exist.
<LI>In passing, let me say that this is different from the Product not being in stock.
<LI>This aspect is called Inventory Control and is covered by a different Database Schema.
<LI>The Relationship between Customer_Orders and Customer_Orders_Products shows a short horizontal line at each end.
<LI>This indicates that every Order must contain at least one Product.
<LI>It also indicates that Product in every Customer_Orders_Products must be associated with an Order in Customer_Orders.

<BR><BR>
<B>Many-to-Many Relationships.</B>
<LI>Many-to-Many Relationships are very important in the real world, and we see them all around us every day.
<LI>In our example, many Customers can order the same Product.
<LI>Many Products can be ordered by the same Customer.
<LI>This is called a Many-to-Many Relationship. It cannot be implemented directly in a Table in a Relational Database.
<LI>The solution is to create an intermediate table that records all combinations that exist of Customer and Product.
<LI>For example, if a Customer ordered three Products, then there would be three records for that Customer in this intermediate table.
<LI>The combination of the Primary keys in the parent Tables become the Primary key in this intermediate table.
<LI>We also need to allow for Comments like 'Make it extra strong, please'.
<LI>If we get the structure to the Database right, then it's straightforward to extend it.
<!---
<LI>The important point here is that this design allows the Customer to place many Orders at Starbucks.
<LI>Which is just as well !!! 
--->

<HR>

<BR><I> &#169 DataBaseAnswers.org 2006</I></FONT>

</BODY>

</HTML>

